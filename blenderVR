#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
# file: blenderVR

## Copyright (C) LIMSI-CNRS (2014)
##
## contributor(s) : Jorge Gascon, Damien Touraine, David Poirier-Quinot,
## Laurent Pointal, Julian Adenauer,
##
## This software is a computer program whose purpose is to distribute
## blender to render on Virtual Reality device systems.
##
## This software is governed by the CeCILL  license under French law and
## abiding by the rules of distribution of free software.  You can  use,
## modify and/ or redistribute the software under the terms of the CeCILL
## license as circulated by CEA, CNRS and INRIA at the following URL
## "http://www.cecill.info".
##
## As a counterpart to the access to the source code and  rights to copy,
## modify and redistribute granted by the license, users are provided only
## with a limited warranty  and the software's author,  the holder of the
## economic rights,  and the successive licensors  have only  limited
## liability.
##
## In this respect, the user's attention is drawn to the risks associated
## with loading,  using,  modifying and/or developing or reproducing the
## software by the user in light of its specific status of free software,
## that may mean  that it is complicated to manipulate,  and  that  also
## therefore means  that it is reserved for developers  and  experienced
## professionals having in-depth computer knowledge. Users are therefore
## encouraged to load and test the software's suitability as regards their
## requirements in conditions enabling the security of their systems and/or
## data to be ensured and,  more generally, to use and operate it in the
## same conditions as regards security.
##
## The fact that you are presently reading this means that you have had
## knowledge of the CeCILL license and that you accept its terms.
##

"""
Daemon
******

This script runs in the console and is responsible for running all elements
for a blenderVR simulation

Using the blenderVR root (relative to this script dir or given via
command line), it setup the Python PATH to make blendervr package (
from modules subdir) available,
"""
import sys
import os
import argparse
import pickle
import subprocess

if sys.platform.startswith('win'): # Windows
    path = os.path.join(os.environ['APPDATA'])
    window = ['start', '/wait']
    window_shell = True
elif sys.platform == 'darwin': # MacOSX
    path = os.path.join(os.path.expanduser('~'), 'Library',
                        'Application Support')
    window = ['open', '-W', '-a', 'Terminal.app']
    window_shell = False
else: # Unix ...
    path = os.path.join(os.path.expanduser('~'), '.config')
    window = ['/usr/bin/mrxvt', '-e']
    window_shell = False
path = os.path.join(path, 'blender')

if not os.path.isdir(path): os.makedirs(path)

profile_file = os.path.join(path, 'vr', 'profile_1.0.pickle')

# Prepare command-line arguments parsing, then parse it.
parser = argparse.ArgumentParser()
parser.add_argument('-r', '--root', dest='root', help='Set the blenderVR root')
parser.add_argument('-v', '--version', dest='d_version', help='Current version of blender player', action='store_true', default=False)

subparsers = parser.add_subparsers(dest='launch')

# Configuration part for the console
p_configuration = subparsers.add_parser('configuration', help='Configuration of the console')
p_configuration.add_argument('-d', '--display', dest='display', help='Display the configuration of the controller', action='store_true', default=False)
p_configuration.add_argument('-c', '--clear', dest='clear', help='Clear the configuration of the controller', action='store_true', default=False)
p_configuration.add_argument('-s', '--set', dest='set', help='Set the configuration of the controller')

p_common = argparse.ArgumentParser(add_help=False)
p_common.add_argument('-d', '--debug', dest='debug', help='Debug blenderVR application', action='store_true', default=False)
p_common.add_argument('-f', '--foreground', dest='foreground', help='Run the console in foreground', action='store_true', default=None)

p_controller = subparsers.add_parser('controller', help='Controller daemon', parents = [p_common])

p_port = argparse.ArgumentParser(add_help=False)
p_port.add_argument('-p', '--port', dest='port', help='Set the port of the controller')

p_logger = subparsers.add_parser('logger', help='Logger', parents = [p_common, p_port])
p_ui = subparsers.add_parser('UI', help='User interface', parents = [p_common, p_port])

p_all = subparsers.add_parser('all', help='controller in background, user interface and logger windowed', parents = [p_common])

try: # Autocomplet from bash
    import argcomplete
    argcomplete.autocomplete(parser)
except:
    pass
    
environments = parser.parse_args()

def checkRoot(path):
    """Check if a given path is valid as blenderVR root.

    This is done by searching a 'modules' subdirectory within that path
    (this modules which contains the blendervr Python package)

    :param path: path to test
    :type path: str
    :return: boolean indicator that path is valid
    :rtype: bool
    """
    return (path and os.path.isdir(os.path.join(path, 'modules', 'blendervr')))

root = None
if environments.root is not None:
    if not checkRoot(environments.root):
        print('Invalid blenderVR root path (' + environments.root + '): it must contain the ' + os.path.join('modules', 'blendervr') + ' folder !')
        sys.exit()
    root = environments.root
elif checkRoot(os.path.dirname(os.path.realpath(__file__))):
    root = os.path.dirname(os.path.realpath(__file__))
else:
    with open(profile_file, 'rb') as node:
        configuration = pickle.load(node)
        if 'root' in configuration:
            root = configuration['root']

if not checkRoot(root):
    print('Cannot find blenderVR root !')
    print('Try adding --root option to configuration (' + sys.argv[0]
            + ' configuration --root="path") !')
    sys.exit()

moduleRoot = os.path.join(root, 'modules')
sys.path.append(moduleRoot)

if environments.d_version:
    try:
        import blendervr
        print('blenderVR version:', blendervr.version)
    except:
        pass
    sys.exit()

# TODO: thinking of adding the global log level inside the configuration
# First, process the configuration part of the console
if environments.launch == 'configuration':
    configuration = None
    with open(profile_file, 'rb') as node:
        configuration = pickle.load(node)
    if environments.display:
        if not configuration:
            print('Empty profile file:', profile_file)
            configuration = []
        else:
            import pprint
            print("Configuration:")
            pprint.pprint(configuration)
            profile_file = None
    if environments.set:
        configuration = eval(environments.set)
    if environments.clear:
        configuration = []
    if environments.root:
        if checkRoot(environments.root):
            configuration['root'] = environments.root
        else:
            print('Invalid root path !')
            profile_file = None
    if profile_file:
        with open(profile_file, 'wb') as node:
            pickle.dump(configuration, node)
    sys.exit()

environment = os.environ
if 'PYTHONPATH' in environment:
    if moduleRoot not in environment['PYTHONPATH']:
        environment['PYTHONPATH'] = moduleRoot + os.pathsep + environment['PYTHONPATH']
else:
    environment['PYTHONPATH'] = moduleRoot

if environments.launch == 'all':
    environments.foreground = False
else:
    if environments.foreground is None:
        environments.foreground = True
    

def start(element, options = []):
    use_Shell = False
    command = []
    if environments.foreground:
        options.append('foreground')
        stream = None
    else:
        options.append('background')
        stream = subprocess.PIPE
        if element != 'controller':
            if sys.platform.startswith('win'): # Windows
                command = ['start', '/wait']
                use_shell = True
            elif sys.platform == 'darwin': # MacOSX
                command = ['open', '-W', '-a', 'Terminal.app']
            else: # Unix ...
                command = ['/usr/bin/mrxvt', '-e']
    command += [sys.executable, os.path.join(root, 'utils', 'console', element + '.py')]

    if environments.debug: options.append('min_log_level=debug')
    else:                  options.append('min_log_level=warn')

    try:
        process = subprocess.Popen(command + options, env = environment, shell = False,
                                   stdin = stream, stderr = stream, stdout = stream)
    except:
        import traceback
        traceback.print_exc()
        sys.exit()
        
    if environments.foreground:
        try:
            process.wait()
        except KeyboardInterrupt:
            pass
        except SystemExit:
            pass
        except:
            import traceback
            traceback.print_exc()
        sys.exit()
    return process

if environments.launch == 'controller' or environments.launch == 'all':
    process = start('controller', [profile_file])

    port = None
    while not port:
        line = process.stdout.readline().decode().strip()
        if line.startswith('***') and line.endswith('***'):
            port = line[3:-3]
        print('Controller port:', port)
        environments.port = port

if environments.port is None:
    print('Missing controller port !')
    sys.exit()

if environments.launch == 'UI' or environments.launch == 'all':
    process = start('ui', [environments.port])

if environments.launch == 'logger' or environments.launch == 'all':
    process = start('logger', [environments.port])
