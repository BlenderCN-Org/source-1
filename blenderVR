#!/usr/bin/env python3

import sys
import os

if sys.platform.startswith('win'): # Windows
    path = os.path.join(os.environ['APPDATA'])
elif sys.platform == 'darwin': # MacOSX
    path = os.path.join(os.path.expanduser('~'), 'Library', 'Application Support')
else: # Unix ...
    path = os.path.join(os.path.expanduser('~'), '.config')
path = os.path.join(path, 'blender')

if not os.path.isdir(path): os.makedirs(path)

profile_file = os.path.join(path, 'vr', 'profile_1.0.pickle')

blenderVR_profilePath = os.path.join(path, 'vr', 'modules')
if not os.path.isdir(blenderVR_profilePath): os.makedirs(blenderVR_profilePath)

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-v', '--version', dest='d_version', help='Current version of blender player', action='store_true', default=False)
parser.add_argument('--blenderVR-root', dest='blenderVR_root', help='Modify the blenderVR root')
parser.add_argument('--display-console', dest='dis_console', help='Display current configuration of the console', action='store_true', default=False)
parser.add_argument('--delete-console', dest='del_console', help='Delete current configuration of the console', action='store_true', default=False)
parser.add_argument('-d', '--debug', dest='debug', help='Debug blenderVR application', action='store_true', default=False)
parser.add_argument('-c', '--controller', dest='controller', help='Start the controller', action='store_true', default=False)
parser.add_argument('-u', '--user-interface', dest='ui', help='Open the user interface', action='store_true', default=False)
parser.add_argument('-a', '--all', dest='all', help='Start the controller and Open the user interface', action='store_true', default=False)
parser.add_argument('-p', '--port', dest='port', help='Set the port of the controller')

environments = parser.parse_args(sys.argv[1:])

def getRootPath(environment):
    if environment is not None:
        return environment
    try:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        if 'root' in configuration:
            return configuration['root']
    except:
        pass
    return os.path.dirname(os.path.realpath(__file__))

root = getRootPath(environments.blenderVR_root)
if root and os.path.isdir(os.path.join(root, 'modules')):
    moduleRoot = os.path.join(root, 'modules')
else:
    print('Cannot find blenderVR root !')
    print('Try adding --blenderVR-root option to blenderVR (' + sys.argv[0] + ' --blenderVR-root="path") !')
    sys.exit()

try:
    if environments.dis_console:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        import pprint
        print("Configuration:")
        pprint.pprint(configuration)
        sys.exit()
    if environments.del_console:
        os.remove(profile_file)
        sys.exit()
except FileNotFoundError:
    print('Invalid profile file:', profile_file)
    sys.exit()
        

if environments.all:
    environments.ui         = True
    environments.controller = True
    environments.all        = False

try:
    sys.path.append(moduleRoot)
    if environments.d_version:
        try:
            import blendervr
            print('Current version:', blendervr.version)
        except:
            pass
        sys.exit()

    environment = os.environ
    environment['PYTHONPATH'] = moduleRoot
    import subprocess
    if environments.controller:
        options     = [profile_file]
        if environments.debug:
            stdout_stream = None
            options.append('debug')
        else:
            stdout_stream = subprocess.PIPE
        process = subprocess.Popen([sys.executable, os.path.join(root, 'utils', 'console', 'controller.py')] + options, env = environment, shell = False, stdout = stdout_stream)
        if not environments.debug:
            port = process.stdout.readline().decode().strip()
            print('port:', port)
        else:
            process.wait()
            sys.exit()
    if environments.ui and environments.port:
        process = subprocess.Popen([sys.executable, os.path.join(root, 'utils', 'console', 'ui.py'), environments.port], env = environment)
        process.wait()

except SystemExit:
    pass
except:
    import traceback
    traceback.print_exc()
    sys.exit()
