#!/usr/bin/env python3

import sys
import os
import builtins

if sys.platform.startswith("win"):
    path = os.path.join(os.environ['APPDATA'])
elif sys.platform == 'darwin':
    path = os.path.join(os.path.expanduser('~'), 'Library', 'Application Support')
else: # Unix ...
    path = os.path.join(os.path.expanduser('~'), '.config')
path = os.path.join(path, 'blender')

if not os.path.isdir(path): os.makedirs(path)

profile_file = os.path.join(path, 'vr', 'profile_1.0.pickle')

builtins.blenderVR_profilePath = os.path.join(path, 'vr', 'modules')
if not os.path.isdir(blenderVR_profilePath): os.makedirs(blenderVR_profilePath)

def isValidRoot(root):
    if root is None:
        return False
    return os.path.isdir(os.path.join(root, 'modules'))

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--version", dest="d_version", help="Current version of blender player",     action="store_true", default=False)
parser.add_argument("--blenderVR-root", dest="blenderVR_root", help="Modify the blenderVR root")
parser.add_argument("--display-console", dest="dis_console", help="Display current congiguration of the console", action="store_true", default=False)
parser.add_argument("--delete-console", dest="del_console", help="Display congiguration of the console", action="store_true", default=False)

environments = parser.parse_args(sys.argv[1:])

root = None
if environments.blenderVR_root is not None:
    root= environments.blenderVR_root

if not isValidRoot(root):
    try:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        if 'root' in configuration:
            root = configuration['root']
    except:
        pass

if not isValidRoot(root):
    root = os.path.dirname(os.path.realpath(__file__))

if not isValidRoot(root):
    print('Cannot find blenderVR root !')
    print('Try adding --blenderVR-root option to blenderVR (' + sys.argv[0] + ' --blenderVR-root="path") !')
    sys.exit()

builtins.blenderVR_root = root

try:
    import imp
    (file, file_name, data) = imp.find_module('blenderVR', [os.path.join(root, 'utils')])
    module = imp.load_module('blenderVR', file, file_name, data)
except SystemExit:
    pass
except:
    import traceback
    traceback.print_exc()

    print('Invalid blenderVR root !')
    print('Try defining BLENDER_VR_ROOT before launching BC (BLENDER_VR_ROOT=\'path\' ' + sys.argv[0] + ') !')
    sys.exit()
